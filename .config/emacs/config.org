#+TITLE:Spencer GNU Emacs Config
#+AUTHOR: Spencer Smith
#+DESCRIPTION: Personal Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-load-first][IMPORTANT, LOAD FIRST]]
  - [[#package-manager-elpaca][Package Manager (Elpaca)]]
  - [[#evil-mode][Evil Mode]]
  - [[#custom-bindings-general][Custom Bindings (General)]]
  - [[#fonts][Fonts]]
  - [[#gui-tweaks][GUI Tweaks]]
  - [[#org-mode][ORG Mode]]
  - [[#which-key][Which Key]]

* IMPORTANT, LOAD FIRST

** Package Manager (Elpaca)

#+begin_src emacs-lisp
    (defvar elpaca-installer-version 0.7)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil :depth 1
                                  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (< emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                     ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                     ,@(when-let ((depth (plist-get order :depth)))
                                                         (list (format "--depth=%d" depth) "--no-single-branch"))
                                                     ,(plist-get order :repo) ,repo))))
                     ((zerop (call-process "git" nil buffer t "checkout"
                                           (or (plist-get order :ref) "--"))))
                     (emacs (concat invocation-directory invocation-name))
                     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                           "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                     ((require 'elpaca))
                     ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))
  (elpaca-wait)
#+end_src

#+RESULTS:

** Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode 1))
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

#+RESULTS:
: [nil 26315 60006 116577 nil elpaca-process-queues nil nil 922000 nil]


** Custom Bindings (General)

#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    ;; set up 'SPC' as the global leader key
    (general-create-definer spence/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    ;; [F]ind stuff
    (spence/leader-keys
      "ff" '(find-file :wk "Find File")
      "fc" '((lambda() (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config"))
    ;; [G]o do this 
    (spence/leader-keys
      "gc" '(comment-line :wk "Comment line"))
    ;; [B]uffer Stuff
    (spence/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bi" '(ibuffer :wk "Ibuffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer"))
    ;; [H]elp me!
    (spence/leader-keys
      "h" '(:ignore t :wk "Help")
      "hf" '(describe-function :wk "Describe function")
      "hv" '(describe-variable :wk "Describe variable")
      "hrr" '((lambda() (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
    ;; [E]valuate stuff
    (spence/leader-keys
      "e" '(:ignore t :wk "Evaluate")    
      "eb" '(eval-buffer :wk "Evaluate elisp in buffer")
      "ed" '(eval-defun :wk "Evaluate defun containing or after point")
      "ee" '(eval-expression :wk "Evaluate and elisp expression")
      "el" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "er" '(eval-region :wk "Evaluate elisp in region"))
    )
#+end_src

#+RESULTS:
: [nil 26315 62095 503676 nil elpaca-process-queues nil nil 20000 nil]

** Fonts

#+begin_src emacs-lisp 
  (set-face-attribute 'default nil
		      :font "JetBrainsMono Nerd Font"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
		      :font "JetBrainsMono Nerd Font Propo"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "JetBrainsMono Nerd Font"
		      :height 120
		      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
		      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
		      :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font-11"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

#+RESULTS:
: 0.12

** GUI Tweaks

*** Ugly bars begone
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

#+RESULTS:

*** Line numbers (relative)
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers 'relative)
  (global-visual-line-mode t)
#+end_src

#+RESULTS:
: t

** ORG Mode

*** TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

#+RESULTS:
: [nil 26315 60223 591189 nil elpaca-process-queues nil nil 464000 nil]

*** Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
	    (use-package org-bullets :ensure t)
	    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

#+RESULTS:
| (lambda nil (org-bullets-mode 1)) | org-indent-mode | toc-org-enable | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " â†’ " ))
#+end_src

#+RESULTS:
: [nil 26315 61314 246366 nil elpaca-process-queues nil nil 176000 nil]

