#+TITLE:Spencer GNU Emacs Config
#+AUTHOR: Spencer Smith
#+DESCRIPTION: Personal Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#garbage-collection-tweak][Garbage Collection Tweak]]
- [[#important-load-first][IMPORTANT, LOAD FIRST]]
  - [[#package-manager-elpaca][Package Manager (Elpaca)]]
  - [[#evil-mode][Evil Mode]]
  - [[#custom-bindings][Custom Bindings]]
  - [[#fonts][Fonts]]
  - [[#native-tweaks][Native Tweaks]]
- [[#completions][Completions]]
- [[#gui-modifications][GUI Modifications]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#highlight-todo][Highlight Todo]]
  - [[#icons][Icons]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#solaire-mode][Solaire Mode]]
  - [[#theme][Theme]]
- [[#language-support][Language Support]]
  - [[#flycheck][Flycheck]]
  - [[#language-modes][Language modes]]
  - [[#treesitter][Treesitter]]
- [[#org-mode][ORG Mode]]
  - [[#org-tweaks][Org Tweaks]]
  - [[#toc][TOC]]
  - [[#org-bullets][Org Bullets]]
  - [[#org-tempo][ORG Tempo]]
- [[#projects][Projects]]
- [[#terminal][Terminal]]
  - [[#vterm][Vterm]]
- [[#sudo-edit][sudo Edit]]
- [[#which-key][Which Key]]
- [[#reset-gc][Reset GC]]

* Garbage Collection Tweak
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src
* IMPORTANT, LOAD FIRST
** Package Manager (Elpaca)
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode))
(elpaca-wait)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-d-scroll t)
  (setq evil-undo-system 'undo-redo)
  (evil-mode 1))
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
;; (with-eval-after-load 'evil-maps
;;   (define-key evil-motion-state-map (kbd "SPC") nil)
;;   (define-key evil-motion-state-map (kbd "RET") nil)
;;   (define-key evil-motion-state-map (kbd "TAB") nil)
;;   (setq org-return-follows-link  t))
(use-package evil-surround
  :ensure t
  :after evil
  :config (global-evil-surround-mode 1))
(use-package evil-commentary
  :ensure t
  :after evil
  :config (evil-commentary-mode 1))
#+end_src

** Custom Bindings
*** Native Emacs
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>")      'keyboard-escape-quit)
#+end_src
*** General
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer spence/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; Misc bindings
  (spence/leader-keys
    "SPC" '(execute-extended-command :wk "M-x mode"))

  ;; [D]ired
  (spence/leader-keys
    "d" '(:ignore t :wk "Dired")
    "dd" '(dired :wk "Open dired")
    "dj" '(dired-jump :wk "Dired jump to current"))

  ;; [F]ind stuff
  (spence/leader-keys
    "f" '(:ignore t :wk "Find")
    "ff" '(find-file :wk "Find file")
    "fc" '((lambda() (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "fr" '(consult-recent-file :wk "Find recent files")
    "fu" '(sudo-edit-find-file :wk "Sudo find file")
    "fU" '(sudo-edit :wk "Sudo edit this file"))

  ;; [B]uffer stuff
  (spence/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "bb" '(consult-buffer :wk "Switch buffer")
    "bi" '(ibuffer :wk "Ibuffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "br" '(revert-buffer :wk "Reload buffer"))

  ;; [H]elp me!
  (spence/leader-keys
    "h" '(:ignore t :wk "Help")
    "hf" '(describe-function :wk "Describe function")
    "hv" '(describe-variable :wk "Describe variable")
    "hm" '(elpaca-manager :wk "Open elpaca manager")
    "hd" '(dashboard-open :wk "Open dashboard")
    "hrr" '((lambda() (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))

  ;; [E]valuate stuff
  (spence/leader-keys
	"e" '(:ignore t :wk "Evaluate")    
	"eb" '(eval-buffer :wk "Evaluate elisp in buffer")
	"ed" '(eval-defun :wk "Evaluate defun containing or after point")
	"ee" '(eval-expression :wk "Evaluate and elisp expression")
	"el" '(eval-last-sexp :wk "Evaluate elisp expression before point")
	"er" '(eval-region :wk "Evaluate elisp in region"))

  ;; [T]oggle stuff
  (spence/leader-keys
	"t" '(:ignore t :wk "Toggle")
	"tl" '(display-line-numbers-mode :wk "Toggle line numbers")
	"tt" '(visual-line-mode :wk "Toggle truncated lines")
	"tv" '(vterm-toggle :wk "Toggle vterm"))

  ;; [W]indow management
  (spence/leader-keys    
	"w" '(:ignore t :wk "Windows")
	;; Window splits
	"wc" '(evil-window-delete :wk "Close window")
	"wn" '(evil-window-new :wk "New window")
	"ws" '(evil-window-split :wk "Horizontal split window")
	"wv" '(evil-window-vsplit :wk "Vertical split window")
	;; Window motions
	"wh" '(evil-window-left :wk "Window left")
	"wj" '(evil-window-down :wk "Window down")
	"wk" '(evil-window-up :wk "Window up")
	"wl" '(evil-window-right :wk "Window right")
	"ww" '(evil-window-next :wk "Goto next window")
	;; Move windows
	"wH" '(buf-move-left :wk "Buffer move left")
	"wJ" '(buf-move-down :wk "Buffer move down")
	"wK" '(buf-move-up :wk "Buffer move up")
	"wL" '(buf-move-right :wk "Buffer move right"))

  ;; Org [M]ode
  (spence/leader-keys
	"m" '(:ignore t :wk "Org")
	"m a" '(org-agenda :wk "Org agenda")
	"m e" '(org-export-dispatch :wk "Org export dispatch")
	"m i" '(org-toggle-item :wk "Org toggle item")
	"m t" '(org-todo :wk "Org todo")
	"m B" '(org-babel-tangle :wk "Org babel tangle")
	"m T" '(org-todo-list :wk "Org todo list")) 
  )

#+end_src

**** Move buffers (for keybinds)
#+begin_src emacs-lisp
(use-package windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
         (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
         (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
         (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
         (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** Fonts
#+begin_src emacs-lisp 
(set-face-attribute 'default nil
                    :font "JetBrainsMono Nerd Font"
                    :height 140)
(set-face-attribute 'variable-pitch nil
                    :font "JetBrainsMono Nerd Font Propo"
                    :height 140)
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrainsMono Nerd Font"
                    :height 140)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font-14"))

;; Uncomment the following line if line spacing needs adjusting.
;; (setq-default line-spacing 0.12)
#+end_src

** Native Tweaks
#+begin_src emacs-lisp
(use-package emacs
  :init
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 0)
  (global-display-line-numbers-mode 1)
  (global-hl-line-mode 1)
  (global-visual-line-mode 1)
  (electric-pair-mode 1)
  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (column-number-mode 1)
  (setq display-line-numbers-type 'relative)
  (setq use-dialog-box nil)
  ;; Org tempo fix
  (add-hook 'org-mode-hook (lambda ()
							 (setq-local electric-pair-inhibit-predicate
										 `(lambda (c)
											(if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  (setq org-edit-src-content-indentation 0)
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
  (setq scroll-margin 10)
  (setq scroll-conservatively 101)
  (setq-default tab-width 4))
#+end_src

* Completions
*** Vertico (vertical completion minibuffer)
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom 
  (vertico-scroll-margin 0)
  (vertico-count 10)
  (vertico-resize t)
  (vertico-cycle t)
  :init
  (vertico-mode))
(use-package savehist
  :init
  (setq history-length 25)
  (savehist-mode))
(use-package emacs
  :custom
  (enable-recursive-minibuffers t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  :init
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src
*** Marginalia (decorations for items in minibuffer)
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :after vertico
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+end_src
*** Consult (useful search functions)
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :after vertico
  :hook (completion-list-mode . consult-preview-at-point-mode))
#+end_src
*** Orderless (different completion styles)
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :after vertico
  :config
  (setq read-buffer-completion-ignore-case t)
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Corfu (in-buffer completions)
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)             
  (corfu-auto t)               
  (corfu-separator ?\s)         
  (corfu-preselect 'prompt)      
  (corfu-scroll-margin 5)        
  :init
  (global-corfu-mode))
(use-package emacs
  :custom
  (tab-always-indent 'complete))
#+end_src

*** Cape (completion sources)
#+begin_src emacs-lisp
(use-package cape
  :ensure t
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src


* GUI Modifications
** Dashboard
#+begin_src emacs-lisp 
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-navigation-cycle t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-display-icons-p t)     
  (setq dashboard-icon-type 'nerd-icons) 
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Joyous Machine Excellence")
  (setq dashboard-startup-banner "~/.config/emacs/images/14JH.svg")
  (setq dashboard-footer-messages '("AMOR FATI" "AD MELIORA" "NIHIL SUB SOLE"))
  (setq dashboard-footer-icon "")
  (setq dashboard-center-content t)
  (setq dashboard-vertically-center-content t)
  (setq dashboard-projects-backend 'project-el)
  (setq dashboard-items '((recents   . 5)
                          (bookmarks . 5)
                          (projects  . 5)
                          (agenda    . 0)
                          (registers . 0)))
  (dashboard-setup-startup-hook))
#+end_src

** Modeline
*** Doom
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1))
#+end_src
*** Hide
#+begin_src emacs-lisp
(use-package hide-mode-line
  :ensure t
  :hook
  (dashboard-mode . hide-mode-line-mode))
#+end_src

** Highlight Todo
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t
  :after dashboard)
(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
  (nerd-icons-completion-mode))
(use-package nerd-icons-ibuffer
  :ensure t
  :hook
  (ibuffer-mode . nerd-icons-ibuffer-mode))
(use-package nerd-icons-corfu
  :ensure t
  :after corfu)
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :hook (org-mode prog-mode))
#+end_src

** Solaire Mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :ensure t
  :config
  (solaire-global-mode +1))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package gruvbox-theme :ensure t)
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; or for treemacs users
  ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;;(doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Language Support
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode 1))
#+end_src

** Language modes
#+begin_src emacs-lisp
#+end_src

** Treesitter
#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (setopt treesit-font-lock-level 4)
  (setq c-ts-mode-indent-offset 4)
  (global-treesit-auto-mode))
#+end_src

* ORG Mode
** Org Tweaks
#+begin_src emacs-lisp
(defun spence/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))
(use-package org
:hook (org-mode . spence/org-mode-setup)
:config
(setq org-ellipsis " ▾"
        org-hide-emphasis-markers t))
#+end_src
** TOC
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
  :hook (org-mode . toc-org-enable))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

** ORG Tempo
#+begin_src emacs-lisp
(use-package org-tempo)
#+end_src

* Projects
#+begin_src emacs-lisp
(use-package project)
#+end_src

* Terminal
** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :commands vterm-toggle
  :config
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 2000))
#+end_src
*** Vterm toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :ensure t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 (direction . bottom)
                 (dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.2))))
#+end_src

* sudo Edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :ensure t
  :commands (sudo-edit sudo-edit-find-file))
#+end_src

* Which Key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.30
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src

* Reset GC
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

